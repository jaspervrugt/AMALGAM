function [AMALGAMPar,Par_info,options] = AMALGAM_check(Func_name, ...
    AMALGAMPar,Par_info,options,Ftrue)
% Check for setup errors

% Derive current time and set deadline
deadline = datenum('28-Feb-2025');

% Now check whether this is a trial version or not
if ( deadline - now ) < 0
    % ERROR -- trial version ended
    error('AMALGAM ERROR: Trial version of AMALGAM V1.4 has ended');
end

% open an output file with warnings
fid = fopen('warning_file.txt','w+');
fprintf(fid,'-------------- AMALGAM warning file --------------\n');

% Check Func_name
if isempty(Func_name)
    error(['AMALGAM ERROR: Input argument Func_name should not be ' ...
        'empty but a string enclosed between quotes with name MATLAB ' ...
        'function that calculates objective functions']);
elseif isnumeric(Func_name)
    % ERROR -- Func_name is not properly defined
    error(char(strcat(['AMALGAM ERROR: The variable Func_name is ' ...
        'defined as numerical value'],{' '},num2str(Func_name), ...
        {' '},[': This should be a string (between quotes) with name ' ...
        'of MATLAB model script (.m file)'])));
elseif ~ischar(Func_name)
    error(['AMALGAM ERROR: Input argument Func_name should be a ' ...
        'string enclosed between quotes with name MATLAB function ' ...
        'that calculates objective functions']);
end

% Check DREAM input data structures
if isempty(AMALGAMPar)
    error(['AMALGAM ERROR: Input argument AMALGAMPar should not be ' ...
        'empty but a structure with different fields']);
elseif ~isstruct(AMALGAMPar)
    error(['AMALGAM ERROR: input argument AMALGAMPar should be a ' ...
        'structure with fields']);
end

% Check DREAM input data structures
if isempty(Par_info)
    error(['AMALGAM ERROR: Input argument Par_info should not be ' ...
        'empty but a structure with different fields']);
elseif ~isstruct(Par_info)
    error(['AMALGAM ERROR: input argument Par_info should be a ' ...
        'structure with fields']);
end

% Check DREAM input data structures
if isempty(options)
    evalstr = strcat(['AMALGAM WARNING: Input argument options is ' ...
        'empty -> default settings will be assumed for its fields ' ...
        '(see Table 3 of manual) \n']);
    % Now print warning to screen and to file
    fprintf(evalstr); fprintf(fid,evalstr);
elseif ~isstruct(options)
    error(['AMALGAM ERROR: input argument options should be a ' ...
        'structure with fields']);
end

% All strings must be lower case, except parameter names
str = {'AMALGAMPar','Par_info','options'};
for z = 1:numel(str)
    vrbl = eval(char(str(z))); fd_names = fieldnames(vrbl);
    for i = 1:numel(fd_names)
        if ischar(vrbl.(char(fd_names(i))))
            evalstr = strcat(str(z),['.(char(fd_names(i))) = ' ...
                'lower('],str(z),'.(char(fd_names(i))));');
            eval(char(evalstr))
        end
    end
end

%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
%                               Func_name
%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
if ischar(Func_name)
    % Check for Func_name.m and remove blank fields (.m and .mlx)
    file_m = evalc(char(strcat('ls ',{' '},Func_name,'.m'))); 
    file_m = strtrim(file_m);
    file_mlx = evalc(char(strcat('ls ',{' '},Func_name,'.mlx'))); 
    file_mlx = strtrim(file_mlx);
    % Now compare (.m and .mlx extensions)
    if strcmp(file_m,strcat(Func_name,'.m')) || ...
            strcmp(file_mlx,strcat(Func_name,'.mlx'))
        if strcmp(file_m,strcat(Func_name,'.m'))
            % Correct - function .m file exists
            char(strcat(['AMALGAM CHECK: Function specified by ' ...
                'user in variable Func_name exists in directory:'], ...
                {' '},pwd))
        elseif strcmp(file_mlx,strcat(Func_name,'.mlx'))
            % Correct - Live script .mlx exists
            char(strcat(['AMALGAM CHECK: Live script specified by ' ...
                'user in variable Func_name exists in directory:'], ...
                {' '},pwd))
        end
    else
        % ERROR -- Func_name is not found in directory
        error(char(strcat(['AMALGAM ERROR: Function (or Live Script)' ...
            'specified by user in variable Func_name (CASE-SENSITIVE!) ' ...
            'cannot be found in directory:'],{' '},pwd)));
    end
end

%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
%                               AMALGAMPar
%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
if ~isfield(AMALGAMPar,'N')
    error('AMALGAM ERROR: Field ''N'' of structure AMALGAMPar undefined');
elseif isempty(AMALGAMPar.N)
    error(['AMALGAM ERROR: Field ''N'' of structure AMALGAMPar ' ...
        'left empty - please list population size']);
elseif ~isnumeric(AMALGAMPar.N)
    error(['AMALGAM ERROR: Field ''N'' of structure AMALGAMPar ' ...
        'should be an integer - please list population size']);
end
if ~isfield(AMALGAMPar,'d')
    error('AMALGAM ERROR: Field ''d'' of structure AMALGAMPar undefined');
elseif isempty(AMALGAMPar.d)
    error(['AMALGAM ERROR: Field ''d'' of structure AMALGAMPar ' ...
        'left empty - please list problem dimensionality ' ...
        '( = number of parameters ) ']);
elseif ~isnumeric(AMALGAMPar.d)
    error(['AMALGAM ERROR: Field ''d'' of structure AMALGAMPar ' ...
        'should be an integer - please list problem dimensionality ' ...
        '( = number of parameters )']);
end
if ~isfield(AMALGAMPar,'T')
    error('AMALGAM ERROR: Field ''T'' of structure AMALGAMPar undefined');
elseif isempty(AMALGAMPar.T)
    error(['AMALGAM ERROR: Field ''T'' of structure AMALGAMPar ' ...
        'left empty - please list the maximum number of generations']);
elseif ~isnumeric(AMALGAMPar.T)
    error(['AMALGAM ERROR: Field ''T'' of structure AMALGAMPar ' ...
        'should be an integer - please list maximum number ' ...
        'of generations']);
end
if ~isfield(AMALGAMPar,'m')
    error('AMALGAM ERROR: Field ''m'' of structure AMALGAMPar undefined');
elseif isempty(AMALGAMPar.m)
    error(['AMALGAM ERROR: Field ''m'' of structure AMALGAMPar ' ...
        'left empty - please list the number of objective functions']);
elseif ~isnumeric(AMALGAMPar.m)
    error(['AMALGAM ERROR: Field ''m'' of structure AMALGAMPar ' ...
        'should be an integer - please list the number of ' ...
        'objective functions']);
end
% Check number of chains
if AMALGAMPar.N < 30
    % Error -- not enough chains to do sampling -- increase number of chains!
    error(['AMALGAM ERROR: Recommend to use a larger population ' ...
        'size -> Set AMALGAMPar.N to be at least 50']);
end
if ( AMALGAMPar.d <= 0 )
    % AMALGAM -- dimensionality should be larger than zero
    error(['AMALGAM ERROR: Number of parameters should be integer ' ...
        'and larger than zero -> Set AMALGAMPar.d >= 1']);
end
if AMALGAMPar.T < 2
    % AMALGAM -- not enough generations
    error(['AMALGAM ERROR: Number of generations smaller than ' ...
        'one -> Set at least AMALGAMPar.T = 2']);
elseif AMALGAMPar.T > 1e6
    evalstr = char(strcat(['AMALGAM WARNING: Field ''T'' of ' ...
        'structure AMALGAMPar set rather large \n'])); 
    % Now print warning to screen and to file
    fprintf(evalstr); fprintf(fid,evalstr);
end
if ( AMALGAMPar.m <= 0 )
    % AMALGAM -- dimensionality should be larger than zero
    error(['AMALGAM ERROR: Number of objectives should be integer ' ...
        'and larger than zero -> Set AMALGAMPar.m >= 1']);
end
if isfield(AMALGAMPar,'rec_methods')
    if isempty(AMALGAMPar.rec_methods)
        evalstr = char(strcat(['AMALGAM WARNING: Field ' ...
            '''rec_methods'' of structure AMALGAMPar left empty -> ' ...
            'default set of recombination methods is used \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~iscell(AMALGAMPar.rec_methods)
        error(['AMALGAM ERROR: Field ''rec_methods'' of structure ' ...
            'AMALGAMPar should be a cell with the names (acronyms) ' ...
            'of the recombination methods used']);
    else
        % Check each recombination method
        for i = 1 : numel(AMALGAMPar.rec_methods)
            idx = ~any(strcmp(AMALGAMPar.rec_methods(i),{'ga', ...
                'ps','am','de'}));
            if idx
                error(char(strcat(['AMALGAM ERROR: Unknown ' ...
                    'recombination method'],{' '}, ...
                    AMALGAMPar.rec_methods(i),{' '},[' --> ' ...
                    'Select from {''GA'',''PS'',''AM'',''DE''}'])));
            end
        end
    end
end
if isfield(AMALGAMPar,'beta_1')
    if isempty(AMALGAMPar.beta_1)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''beta_1'' ' ...
            'of structure AMALGAMPar left empty - default value ' ...
            'assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.beta_1)
        error(['AMALGAM ERROR: Field ''beta_1'' of structure ' ...
            'AMALGAMPar should be a numerical value (default: ' ...
            'AMALGAMPar.beta_1 drawn from UNIFORM[0.6,1])']);
    end
    if AMALGAMPar.beta_1 <= 0
        error(['AMALGAM ERROR: DE scaling factor beta_1 of ' ...
            'differential evolution should be larger than ' ...
            'zero -> Use at least AMALGAMPar.beta_1 = 0.4 ' ...
            '(default: beta_1 drawn from UNIFORM[0.6,1])'])
    elseif ( AMALGAMPar.beta_1 ) > 2
        evalstr = char(strcat(['AMALGAM WARNING: DE scaling ' ...
            'factor beta_1 of differential evolution somewhat ' ...
            'large --> (default: AMALGAMPar.beta_1 drawn ' ...
            'from UNIFORM[0.6,1]) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end
if isfield(AMALGAMPar,'beta_2')
    if isempty(AMALGAMPar.beta_2)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''beta_2'' ' ...
            'of structure AMALGAMPar left empty - default value ' ...
            'assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.beta_2)
        error(['AMALGAM ERROR: Field ''beta_2'' of structure ' ...
            'AMALGAMPar should be a numerical value (default: ' ...
            'AMALGAMPar.beta_2 drawn from UNIFORM[0.2,0.6])']);
    end
    if AMALGAMPar.beta_2 <= 0
        error(['AMALGAM ERROR: DE scaling factor beta_2 of ' ...
            'differential evolution should be larger than ' ...
            'zero -> Use at least AMALGAMPar.beta_2 = 0.2 ' ...
            '(default: beta_2 drawn from UNIFORM[0.2,0.6])'])
    elseif ( AMALGAMPar.beta_2 ) > 2
        evalstr = char(strcat(['AMALGAM WARNING: DE scaling ' ...
            'factor beta_2 of differential evolution set ' ...
            'rather large -> (default: AMALGAMPar.beta_2 ' ...
            'drawn from UNIFORM[0.2,0.6]) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end
if isfield(AMALGAMPar,'c1')
    if isempty(AMALGAMPar.c1)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''c1'' ' ...
            'of structure AMALGAMPar left empty - default ' ...
            'value assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.c1)
        error(['AMALGAM ERROR: Field ''c1'' of structure ' ...
            'AMALGAMPar should be a numerical value ' ...
            '(default: AMALGAMPar.c1 = 1.5)']);
    end
    if AMALGAMPar.c1 <= 0
        error(['AMALGAM ERROR: PSO social factor should be ' ...
            'larger than zero -> Use at least ' ...
            'AMALGAMPar.c1 = 1 (default: AMALGAMPar.c1 = 1.5)'])
    elseif ( AMALGAMPar.c1 ) > 2
        evalstr = char(strcat(['AMALGAM WARNING: PSO social ' ...
            'factor set rather large -> (default: ' ...
            'AMALGAMPar.c1 = 1.5) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end
if isfield(AMALGAMPar,'c2')
    if isempty(AMALGAMPar.c2)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''c2'' ' ...
            'of structure AMALGAMPar left empty - default value ' ...
            'assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.c2)
        error(['AMALGAM ERROR: Field ''c2'' of structure AMALGAMPar ' ...
            'should be a numerical value (default: AMALGAMPar.c2 = 1.5)']);
    end
    if AMALGAMPar.c2 <= 0
        error(['AMALGAM ERROR: PSO cognitive factor should be larger ' ...
            'than zero -> Use at least AMALGAMPar.c2 = 1 ' ...
            '(default: AMALGAMPar.c2 = 1.5)'])
    elseif ( AMALGAMPar.c2 ) > 2
        evalstr = char(strcat(['AMALGAM WARNING: PSO cognitive ' ...
            'factor set rather large -> (default: ' ...
            'AMALGAMPar.c2 = 1.5) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end
if isfield(AMALGAMPar,'varphi')
    if isempty(AMALGAMPar.varphi)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''varphi'' ' ...
            'of structure AMALGAMPar left empty - default value ' ...
            'assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.varphi)
        error(['AMALGAM ERROR: Field ''varphi'' of structure ' ...
            'AMALGAMPar should be a numerical value between 0 ' ...
            'and 1 (default: AMALGAMPar.varphi drawn ' ...
            'from UNIFORM[0.5,1.0])']);
    end
    if AMALGAMPar.varphi <= 0
        error(['AMALGAM ERROR: PSO inertia factor should be ' ...
            'larger than zero -> Use at least ' ...
            'AMALGAMPar.varphi = 0.25 (default: ' ...
            'AMALGAMPar.varphi drawn from UNIFORM[0.5,1.0])'])
    elseif ( AMALGAMPar.varphi ) > 2
        evalstr = char(strcat(['AMALGAM WARNING: PSO inertia ' ...
            'factor set rather large -> (default: ' ...
            'AMALGAMPar.varphi drawn from UNIFORM[0.5,1.0]) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end
if isfield(AMALGAMPar,'p_CR')
    if isempty(AMALGAMPar.p_CR)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''p_CR'' ' ...
            'of structure AMALGAMPar left empty - default ' ...
            'value assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.p_CR)
        error(['AMALGAM ERROR: Field ''p_CR'' of structure ' ...
            'AMALGAMPar should be a numerical value between ' ...
            '0 and 1 (default: AMALGAMPar.p_CR = 0.9)']);
    end
    if ( AMALGAMPar.p_CR < 0 ) || ( AMALGAMPar.p_CR > 1 )
        error(['AMALGAM ERROR: NSGA-II crossover rate should ' ...
            'be between 0 and 1 -> AMALGAMPar.p_CR in [0,1] ' ...
            '(default: AMALGAMPar.p_CR = 0.9)']);
    end
end
if isfield(AMALGAMPar,'p_M')
    if isempty(AMALGAMPar.p_M)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''p_M'' ' ...
            'of structure AMALGAMPar left empty - default value ' ...
            'assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.p_M)
        error(['AMALGAM ERROR: Field ''p_M'' of structure ' ...
            'AMALGAMPar should be a numerical value ' ...
            '(default: AMALGAMPar.p_M = 1/AMALGAMPar.d)']);
    end
    if ( AMALGAMPar.p_M < 0 ) || ( AMALGAMPar.p_M > 1 )
        error(['AMALGAM ERROR: NSGA-II mutation rate should ' ...
            'be between 0 and 1 -> AMALGAMPar.p_M in [0,1] ' ...
            '(default: AMALGAMPar.p_M = 1/AMALGAMPar.d)']);
    end
end
if isfield(AMALGAMPar,'eta_C')
    if isempty(AMALGAMPar.eta_C)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''eta_C'' ' ...
            'of structure AMALGAMPar left empty - default value ' ...
            'assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.eta_C)
        error(['AMALGAM ERROR: Field ''eta_C'' of structure ' ...
            'AMALGAMPar should be a numerical value ' ...
            '(default: AMALGAMPar.eta_C = 10)']);
    end
    if AMALGAMPar.eta_C <= 0
        error(['AMALGAM ERROR: NSGA-II mutation index eta_C ' ...
            'should be larger than zero -> Use at least ' ...
            'AMALGAMPar.eta_C = 1 (default: AMALGAMPar.eta_C = 10)']);
    elseif ( AMALGAMPar.eta_C ) > 200
        evalstr = char(strcat(['AMALGAM WARNING: NSGA-II mutation ' ...
            'index eta_C set rather large -> ' ...
            '(default: AMALGAMPar.eta_C = 10) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end
if isfield(AMALGAMPar,'eta_M')
    if isempty(AMALGAMPar.eta_M)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''eta_M'' ' ...
            'of structure AMALGAMPar left empty - default ' ...
            'value assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.eta_M)
        error(['AMALGAM ERROR: Field ''eta_M'' of structure ' ...
            'AMALGAMPar should be a numerical value ' ...
            '(default: AMALGAMPar.eta_M = 50)']);
    end
    if AMALGAMPar.eta_M <= 0
        error(['AMALGAM ERROR: NSGA-II mutation index eta_M ' ...
            'should be larger than zero -> Use at least ' ...
            'AMALGAMPar.eta_M = 1 (default: AMALGAMPar.eta_M = 50)']);
    elseif ( AMALGAMPar.eta_M ) > 200
        evalstr = char(strcat(['AMALGAM WARNING: PSO mutation ' ...
            'index eta_M set rather large -> ' ...
            '(default: AMALGAMPar.eta_M = 50) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end
if isfield(AMALGAMPar,'gamma')
    if isempty(AMALGAMPar.gamma)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''gamma'' ' ...
            'of structure AMALGAMPar left empty - default ' ...
            'value assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.gamma)
        error(['AMALGAM ERROR: Field ''gamma'' of structure ' ...
            'AMALGAMPar should be a numerical value ' ...
            '(default: AMALGAMPar.gamma = (2.38/sqrt(AMALGAMPar.d))^2)']);
    end
    if AMALGAMPar.gamma <= 0
        error(['AMALGAM ERROR: AMS jump rate should be larger ' ...
            'than zero -> Use at least AMALGAMPar.gamma = 0.1 ' ...
            '(default: AMALGAMPar.gamma = (2.38/sqrt(AMALGAMPar.d))^2)']);
    elseif ( AMALGAMPar.gamma ) > 5
        evalstr = char(strcat(['AMALGAM WARNING: AMS jump rate ' ...
            'set rather large -> ' ...
            '(default: AMALGAMPar.gamma = ' ...
            '(2.38/sqrt(AMALGAMPar.d))^2) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end

if isfield(AMALGAMPar,'K')
    if isempty(AMALGAMPar.K)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''K'' ' ...
            'of structure AMALGAMPar left empty - default value ' ...
            'assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.K)
        error(['AMALGAM ERROR: Field ''K'' of structure AMALGAMPar ' ...
            'should be an integer (default: K = 1)']);
    end
    if ( AMALGAMPar.K < 1 )
        % AMALGAM -- thinning parameter should be positive
        error(['AMALGAM ERROR: Thinning parameter should be integer ' ...
            'and larger than zero -> Set AMALGAMPar.K >= 1 (default: 1)']);
    elseif ( AMALGAMPar.K > 20 )
        evalstr = char(strcat(['AMALGAM WARNING: Field ''K'' of ' ...
            'structure AMALGAMPar set rather large -> recommend ' ...
            'to use AMALGAMPar.K in [1,20] \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    end
end

if isfield(AMALGAMPar,'p0')
    % Check content of p_min
    if isempty(AMALGAMPar.p0)
        evalstr = char(strcat(['AMALGAM WARNING: Field ''p0'' ' ...
            'of structure AMALGAMPar left empty - default value ' ...
            'assumed (see Table 1 of manual) \n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
    elseif ~isnumeric(AMALGAMPar.p0)
        error(['AMALGAM ERROR: Field ''p0'' of structure ' ...
            'AMALGAMPar should contain a numerical value']);
    end
    % Now check number of elements
    if numel(AMALGAMPar.p0) > 1
        error(['AMALGAM ERROR: Too many minimum values of ' ...
            'selection probabilities. AMALGAMPar.p0 ' ...
            'should be a scalar']);
    end
    if AMALGAMPar.p0 < 0
        error(['AMALGAM ERROR: Minimum selection probability of ' ...
            'recombination methods should be larger than zero']);
    end
    % Check if recombination methods have been defined
    if isfield(AMALGAMPar,'rec_methods')
        n_scalar = 1/numel(AMALGAMPar.rec_methods);
    else
        n_scalar = 1/4;
    end
    if AMALGAMPar.p0 > n_scalar
        error(char(strcat(['AMALGAM ERROR: Minimum selection probability ' ...
            ['of recombination methods set too large --> ' ...
            'AMALGAMPar.p0 \in [0,'], ...
            num2str(round(100*n_scalar)/100),']'])));
    end
    if AMALGAMPar.p0 == n_scalar
        error(char(strcat(['AMALGAM WARNING: Minimum selection ' ...
            'probability set so large that no adaptation can ' ...
            'take place --> AMALGAMPar.p0 \in [0,', ...
            num2str(round(100*n_scalar)/200),'] to get some adaptation'])));
    end
end

%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
%                               Par_info
%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
if ~isfield(Par_info,'initial')
    error(['AMALGAM ERROR: Initial sampling distribution ' ...
        'not defined -> Define Par_info.initial = ''latin'' ' ...
        'or ''uniform'' or ''normal'' or ''prior''!!']);
elseif isempty(Par_info.initial)
    error(['AMALGAM ERROR: Field ''initial'' of structure ' ...
        'AMALGAMPar left empty -> Define ' ...
        'Par_info.initial = ''latin'' or ''uniform'' ' ...
        'or ''normal'' or ''prior''!!']);
elseif ~ischar(Par_info.initial)
    error(['AMALGAM ERROR: Field ''initial'' of structure ' ...
        'AMALGAMPar should contain a string enclosed ' ...
        'between quotes -> Par_info.initial = ''latin'' ' ...
        'or ''uniform'' or ''normal'' or ''prior''!!']);
end
if ~any(strcmp(Par_info.initial,{'latin','uniform','normal','prior'}))
    error(['AMALGAM ERROR: Initial sampling distribution ' ...
        'unknown -> Set Par_info.initial = ''latin'' ' ...
        'or ''uniform'' or ''normal'' or ''prior''!!']);
end
if strcmp(Par_info.initial,'latin')
    % AMALGAM -- if lhs is used -> requires explicit parameter ranges
    if ~isfield(Par_info,'min')
        error(['AMALGAM ERROR: Latin hypercube sampling ' ...
            'selected but minimum parameter values ' ...
            'not defined -> Set Par_info.min!!']);
    end
    if ~isfield(Par_info,'max')
        error(['AMALGAM ERROR: Latin hypercube sampling ' ...
            'selected but maximum parameter values ' ...
            'not defined -> Set Par_info.max!!']);
    end
end
if strcmp(Par_info.initial,'uniform')
    % AMALGAM -- if uniform initial sampling is used -> requires explicit parameter ranges
    if ~isfield(Par_info,'min')
        error(['AMALGAM ERROR: Uniform initial sampling ' ...
            'selected but minimum parameter values ' ...
            'not defined -> Set Par_info.min!!']);
    end
    if ~isfield(Par_info,'max')
        error(['AMALGAM ERROR: Uniform initial sampling ' ...
            'selected but maximum parameter values ' ...
            'not defined -> Set Par_info.max!!']);
    end
end
if strcmp(Par_info.initial,'normal')
    % AMALGAM -- if normal is used --> mean and covariance of this distribution need to be defined
    if ~isfield(Par_info,'mu')
        error(['AMALGAM ERROR: Normal distribution selected ' ...
            'to sample from but unknown mean -> Define Par_info.mu!!']);
    end
    if ~isfield(Par_info,'cov')
        error(['AMALGAM ERROR: Normal distribution selected ' ...
            'to sample from but unknown covariance ' ...
            '-> Define Par_info.cov!!']);
    end
end
if strcmp(Par_info.initial,'normal')
    % AMALGAM -- if normal is used --> mean and covariance of this distribution need to be defined
    if sum(size(Par_info.mu) ~= [1 AMALGAMPar.d])
        error(char(strcat(['AMALGAM ERROR: Mean of normal ' ...
            'distribution (Par_info.mu) should be a row vector ' ...
            'with AMALGAMPar.d = '],{' '},num2str(AMALGAMPar.d), ...
            {' '},'values')));
    end
    if sum(size(Par_info.cov) ~= [AMALGAMPar.d AMALGAMPar.d])
        error(char(strcat(['AMALGAM ERROR: Covariance of ' ...
            'normal distribution (''Par_info.cov'') should be a ' ...
            'square matrix of size AMALGAMPar.d x AMALGAMPar.d = '], ...
            {' '},num2str(AMALGAMPar.d),{' '},'x',{' '}, ...
            num2str(AMALGAMPar.d),{' '},'values')));
    end
end
if strcmp(Par_info.initial,'prior')
    % AMALGAM -- if explicit prior is used --> marginals need to be defined
    if ~isfield(Par_info,'prior')
        error(['AMALGAM ERROR: Prior distribution selected but ' ...
            'unknown field ''prior'' of structure Par_info ' ...
            '-> Define Par_info.prior (see section 4.3 of ' ...
            'AMALGAM manual for prior specification)!!']);
    end
end
% Dummy variable to make things easier
if ~isfield(Par_info,'boundhandling')
    evalstr = char(strcat(['AMALGAM CHECK: Field ''boundhandling'' ' ...
        'of structure Par_info not specified by user ' ...
        '-> thus AMALGAM assumes an unbounded parameter space \n']));
    % Now print warning to screen and to file
    fprintf(evalstr); fprintf(fid,evalstr);
    % Set no to bounhandling
    Par_info.boundhandling = 'none';    
elseif isempty(Par_info.boundhandling)
    evalstr = char(strcat(['AMALGAM WARNING: Field ''boundhandling'' ' ...
        'of structure Par_info is empty ' ...
        '-> AMALGAM assumes unbounded parameter space \n']));
    % Now print warning to screen and to file
    fprintf(evalstr); fprintf(fid,evalstr);
    % Set no to bounhandling
    Par_info.boundhandling = 'none';
elseif ~ischar(Par_info.boundhandling)
    error(['AMALGAM ERROR: Field ''boundhandling'' of structure ' ...
        'Par_info should contain a string enclosed between quotes ' ...
        '-> Par_info.boundhandling = ''fold'' or ''bound'' or ' ...
        '''reflect'' or ''none''!!']);
end
if ~any(strcmp(Par_info.boundhandling,{'fold','bound','reflect','none'}))
    error(['AMALGAM ERROR: Unknown boundary handling method ' ...
        '-> Define Par_info.boundhandling = ''fold'' ' ...
        'or ''bound'' or ''reflect'' or ''none''!!\n']);
end
if any(strcmp(Par_info.boundhandling,{'fold','bound','reflect'}))
    if ~isfield(Par_info,'min')
        error(char(strcat(['AMALGAM ERROR: Par_info.boundhandling ' ...
            'is equal to'],{' '},'''',Par_info.boundhandling,'''', ...
            {' '},['but minimum parameter values ' ...
            'not defined in Par_info.min'])));
    elseif isempty(Par_info.min)
        error(char(strcat(['AMALGAM ERROR: Par_info.boundhandling ' ...
            'is equal to'],{' '},'''',Par_info.boundhandling,'''', ...
            {' '},['but Par_info.min is empty ' ...
            '-> please define minimum values of each parameter'])));
    elseif ~isnumeric(Par_info.min)
        error(char(strcat(['AMALGAM ERROR: Par_info.boundhandling ' ...
            'is equal to'],{' '},'''',Par_info.boundhandling,'''', ...
            {' '},['but Par_info.min does not list ' ...
            'numerical lower limits parameters'])));
    end
    if ~isfield(Par_info,'max')
        error(char(strcat(['AMALGAM ERROR: Par_info.boundhandling ' ...
            'is equal to'],{' '},'''',Par_info.boundhandling,'''', ...
            {' '},['but maximum parameter values ' ...
            'not defined in Par_info.max'])));
    elseif isempty(Par_info.max)
        error(char(strcat(['AMALGAM ERROR: Par_info.boundhandling ' ...
            'is equal to'],{' '},'''',Par_info.boundhandling,'''', ...
            {' '},['but Par_info.max is empty ' ...
            '-> please define maximum values of each parameter'])));
    elseif ~isnumeric(Par_info.max)
        error(char(strcat(['AMALGAM ERROR: Par_info.boundhandling ' ...
            'is equal to'],{' '},'''',Par_info.boundhandling,'''', ...
            {' '},['but Par_info.max does not ' ...
            'list numerical upper limits parameters'])));
    end
end
if any(strcmp(Par_info.initial,{'latin','uniform'})) ...
    || any(strcmp(Par_info.boundhandling,{'fold','bound','reflect'}))
    % AMALGAM if Par_info.min or Par_info.max not equal to AMALGAMPar.d
    if ( numel(Par_info.min) ~= AMALGAMPar.d )
        error(char(strcat(['AMALGAM ERROR: Number of elements ' ...
            'of field ''min'' of structure Par_info should be ' ...
            'equal to '],{' '},num2str(AMALGAMPar.d),'!!')));
    end
    % AMALGAM if Par_info.min or Par_info.max not equal to AMALGAMPar.d
    if ( numel(Par_info.max) ~= AMALGAMPar.d )
        error(char(strcat(['AMALGAM ERROR: Number of elements ' ...
            'of field ''max'' of structure Par_info should be ' ...
            'equal to '],{' '},num2str(AMALGAMPar.d),'!!')));
    end
end
if isfield(Par_info,'steps')
    if isempty(Par_info.steps)
        error(['AMALGAM ERROR: Field ''steps'' of structure ' ...
            'Par_info left empty -> Define Par_info.steps to ' ...
            'have AMALGAMPar.d elements!!']);
    end
    if ( sum(abs(round(Par_info.steps) - Par_info.steps)) > 0 )
        error(['AMALGAM ERROR: Field ''steps'' of structure ' ...
            'Par_info should contain integers only!!']);
    end
    a = numel(Par_info.steps);
    if ( a == 1 ) && ( AMALGAMPar.d > 1 )
        evalstr = char(strcat(['AMALGAM WARNING: Field ''steps'' ' ...
            'of structure Par_info lists a single value and will ' ...
            'be copied AMALGAMPar.d times\n']));
        % Now print warning to screen and to file
        fprintf(evalstr); fprintf(fid,evalstr);
        % Copy AMALGAMPar.d times the values of Par_info.steps
        Par_info.steps = Par_info.steps * ones(1,AMALGAMPar.d);
    elseif ( a > 1 ) && ( a ~= AMALGAMPar.d )
        error(char(strcat(['AMALGAM ERROR: Number of elements of ' ...
            'field ''steps'' of structure Par_info should be ' ...
            'equal to '],{' '},num2str(AMALGAMPar.d),'!!')));
    end
end
% Remove field of boundhandling if it is not used anyway
if strcmp(Par_info.boundhandling,'none')
    Par_info = rmfield(Par_info,'boundhandling');
end

%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
%                               options
%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
if isfield(options,'ranking')
    if isempty(options.ranking)
        error(['AMALGAM ERROR: Field ''ranking'' of structure ' ...
            'options is empty -> Set options.ranking = ''matlab'' ' ...
            'or ''c'' ']);
    end
    if ~ischar(options.ranking)
        error(['AMALGAM ERROR: Field ''ranking'' of structure ' ...
            'options should contain string enclosed between ' ...
            'quotes -> Set options.ranking = ''matlab'' or ''c'' ']);
    end
    if ~any(strcmp(options.ranking,{'matlab','c'}))
        error(['AMALGAM ERROR: Unknown ranking method -> Set ' ...
            'options.ranking = ''matlab'' or ''c'' (default ''matlab'')']);
    end
else
    evalstr = char(strcat(['AMALGAM WARNING: Field ''ranking'' ' ...
        'of structure options not defined -> resort to default ' ...
        'setting, options.ranking = ''matlab'' \n']));
    % Now print warning to screen and to file
    fprintf(evalstr); fprintf(fid,evalstr);
end

if isfield(options,'density')
    if isempty(options.density)
        error(['AMALGAM ERROR: Field ''density'' of structure' ...
            ' options is empty ' ...
            '-> Set options.density = ''crowding'' or ''strength'' ']);
    elseif ~ischar(options.density)
        error(['AMALGAM ERROR: Field ''density'' of structure ' ...
            'options should contain string enclosed between quotes ' ...
            '-> Set options.density = ''crowding'' or ''strength'' ']);
    elseif ~any(strcmp(options.density, {'crowding','strength'}))
        error(['AMALGAM ERROR: Unknown ranking method ' ...
            '-> Set options.density = ''crowding'' ' ...
            'or ''strength'' (default ''crowding'')']);
    end
else
    evalstr = char(strcat(['AMALGAM WARNING: Field ''density'' ' ...
        'of structure options not defined -> resort to ' ...
        'default setting, options.density = ''crowding'' \n']));
    % Now print warning to screen and to file
    fprintf(evalstr); fprintf(fid,evalstr);
end
% Now check whether to print to screen
if ~isfield(options,'print')
    % Now write to screen
    evalstr = char(['AMALGAM WARNING: Field ''print'' of structure ' ...
        'options not defined as ''yes'' or ''no'' -> resort to ' ...
        'default setting of options.print = ''yes'' \n']);
    % Now print warning to screen and to file
    fprintf(evalstr); fprintf(fid,evalstr);
else
    if isempty(options.print)
        error(['AMALGAM ERROR: Field ''print'' of structure options ' ...
            'should not be empty but should contain ' ...
            'a string (''yes'' or ''no'') \n']);
    elseif ~ischar(options.print)
        error(['AMALGAM ERROR: Field ''print'' of structure options ' ...
            'should be a string (content equal to ''yes'' or ''no'') \n']);
    elseif ~any(strcmp(options.print,{'yes','no'}))
        error(['AMALGAM ERROR: Field ''print'' of structure options ' ...
            'should equal ''yes'' or ''no'' ']);
    end
end
% Now check whether to print to screen during AMALGAM trial ( = hidden option )
if ~isfield(options,'screen') || isempty(options.screen) ...
        || ~ischar(options.screen) ...
        || ~any(strcmp(options.screen,{'yes','no'}))
    options.screen = 'no';
end 
% Check content of each field of structure options
name = fieldnames(options);
% Warning if content not equal to yes or no
for j = 1 : numel(name)
    % Get content of respective field of options
    F = getfield(options,char(name(j)));
    % now check content
    if ~any(strcmp(name(j),{'ranking','density'}))
        if ~any(strcmp(F,{'yes','no'}))
            % AMALGAM -- content of field name(j) of options should be yes or no
            error(char(strcat('AMALGAM ERROR: Field', ...
                {' '},'''',name(j),'''',{' '},['of structure options ' ...
                'should be set equal to ''yes'' or ''no'''])));
        end
    end
end
% If parallel computing is requested - check whether toolbox is available
if isfield(options,'parallel')
    % If parallel = 'yes' -> check whether user has the distributed computing toolbox
    if strcmp(options.parallel,'yes')
        % Now check whether user has Distributed Computing toolbox available
        toolbox = license('checkout','Distrib_Computing_Toolbox');
        % If toolbox is zero then list comment
        if ( toolbox == 0 )
            evalstr = char(['AMALGAM WARNING: Distributed ' ...
                'Computing toolbox not available -> code resorts ' ...
                'to default setting, that is, ' ...
                'options.parallel = ''no'' \n']);
            % Now print warning to screen
            fprintf(evalstr); fprintf(fid,evalstr);
            % And update field parallel of options
            options.parallel = 'no';
        end
    end
end

%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
%                                 Ftrue
%<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
if isempty(Ftrue)
    evalstr = char(['AMALGAM WARNING: User did not specify ' ...
        'Pareto solutions (sixth input argument is empty) ' ...
        '-> cannot compute convergence diagnostics \n']);
    % Now print warning to screen
    fprintf(evalstr); fprintf(fid,evalstr);
elseif ~isnumeric(Ftrue)
    error(['AMALGAM ERROR: Input argument Fpar should be left ' ...
        'empty or contain numerical values (for benchmark ' ...
        'experiments on KNOWN Pareto solution sets) \n']);
elseif ( size(Ftrue,2) ~= AMALGAMPar.m )
    % AMALGAM -- number of objectives do not match
    error(char(strcat(['AMALGAM ERROR: Number of columns of Fpar ' ...
        'should match number of objectives, that is, AMALGAMPar.m ='], ...
        {' '},num2str(AMALGAMPar.m),{' '},'columns in present case')));
elseif ( size(Ftrue,1) < 5 )
    % AMALGAM -- number of Pareto solution too small
    error(['AMALGAM ERROR: Number of pareto solutions stored in ' ...
        'Fpar is rather small -> increasse to at least 100 ' ...
        'to get reasonable convergence statistics']);
end

% Now close warning_file.txt file
fclose(fid);